生成AI

- 目的
	- だれでも、素早く価値を提供できるよう
- 目標
	- 設計書とタスクをインプットしたら１つの機能とその振る舞いを確認できるテスト、ドキュメントが完成する
	- 開発者が自分でコードを書かないでよい
	- 開発者が自分でコードを読まないでよい
		- テストは読む必要あり？
	- 一般的なフロントエンド(SPA)、バックエンド(WebAPI)で構成されるプロジェクトに適用できる
- 課題
	- インプットとして何をどのような内容で与えれば良いか
		- インフラ
			- プロンプト
				- コーディングルール
				- フォルダ構成
				- ベストプラクティスに関する何か
				- 技術スタック
					- ライブラリ(CDK)
				- Copilotの振る舞いについて
					- AWSのベストプラクティス遵守
					- CDKに関するベストプラクティス遵守
			- タスク
				- 何が書かれているべきか、どういうフォーマットであるべきか
					- 完了条件
			- 設計書
				- AWS構成図
				- 非機能要件定義 or さらに具体化した非機能に関する設計書？
		- バックエンド
			- プロンプト
				- コーディングルール
				- フォルダ構成
				- 技術スタック
					- フレームワーク
					- ライブラリ
					- アーキテクチャ
					- 静的解析、フォーマッター
				- Copilotの振る舞いについて
					- コメントについて
					- 守ってほしい原則系
						- SOLID
						- KISS
						- DRY
						- デメテル
			- 設計書
				- APIの外部IF定義(swagger)
				- ビジネスロジック
					- ドメイン知識
						- ドメインモデル図
						- 不変条件(業務ルール)
					- クラス図？
				- データベース
					- ER図？
				- 非機能要件定義
			- タスク
				- 完了条件
				- 他にどんな項目が必要か
		- フロントエンド
			- プロンプト
				- コーディングルール
				- フォルダ構成
				- 技術スタック
					- UIフレームワーク
					- CSSフレームワーク
					- ライブラリ
				- 使用ライブラリ
				- 振る舞い
					- 原則系
						- コンポーネント指向
						- Atomic Design
						- SOLID
						- DRY
			- タスク
				- Gherkin?
				- 完了条件
			- figma
			- 画面設計書
			- パス
		- 共通
			- プロンプト
				- Gitに関するルール
					- コミットメッセージ
					- CI/CD(コミット前)
			- サンプル実装
	- コードベースの0-1をどうするか
		- コード生成を始めるにあたり、サンプル実装がある方が良い
			- → ナレッジベース...https://docs.github.com/ja/enterprise-cloud@latest/copilot/customizing-copilot/managing-copilot-knowledge-bases
	- MCP活用
	- プロンプト
