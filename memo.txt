
# フロントエンド共通処理
- axios共通設定
```typescript
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

// APIレスポンスの型定義例
export interface ApiResponse<T> {
  data: T;
  message?: string;
  status?: string;
}

// エラーレスポンスの型定義例
export interface ApiErrorResponse {
  statusCode: number;
  message: string;
}

// Axiosインスタンスの作成
const api: AxiosInstance = axios.create({
  baseURL: 'https://api.example.com', // 共通のエンドポイント
  timeout: 10000, // タイムアウト
  headers: {
    'Content-Type': 'application/json', // 共通のContent-Type
  },
});

// リクエストインターセプター: 動的なヘッダーの設定
api.interceptors.request.use(
  (config: AxiosRequestConfig) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers = {
        ...config.headers,
        Authorization: `Bearer ${token}`,
      };
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// レスポンスインターセプター: 共通エラーハンドリング
api.interceptors.response.use(
  (response: AxiosResponse) => response,
  (error) => {
    if (error.response) {
      // サーバーエラー
      console.error(`[API Error]: ${error.response.status} - ${error.response.data.message || 'Unexpected error'}`);
    } else if (error.request) {
      // ネットワークエラー
      console.error('[Network Error]: Unable to reach the server.');
    } else {
      // その他のエラー
      console.error(`[Unknown Error]: ${error.message}`);
    }

    // 必要に応じてエラー内容を加工してスロー
    const apiError: ApiErrorResponse = {
      statusCode: error.response?.status || 500,
      message: error.response?.data?.message || 'An unexpected error occurred.',
    };
    return Promise.reject(apiError);
  }
);

export default api;


---

import api, { ApiResponse } from '../utils/api';

// レスポンスデータ型の定義
interface User {
  id: number;
  name: string;
  email: string;
}

// ユーザー一覧取得 (GETリクエスト)
export const fetchUsers = async (): Promise<ApiResponse<User[]>> => {
  const response = await api.get<ApiResponse<User[]>>('/users');
  return response.data;
};

// 新規ユーザー登録 (POSTリクエスト)
export const createUser = async (user: Omit<User, 'id'>): Promise<ApiResponse<User>> => {
  const response = await api.post<ApiResponse<User>>('/users', user);
  return response.data;
};

```
---

フロントエンドテスト


# アカウント作成
- admin-create-user
- admin-ser-user-password
- admin-confirm-sign-up


- リポジトリに戻りは、、、エンティティ
- 
- ユーザー作成
	- リクエストのバリデーション
	- AdminCreateUserControllerの呼び出し
		- 引数
			- AdminCreateUserInput
				- actorAccountId
				- action
				- resource
				
				- 権限
			- AdminCreateUserResponse
				- 
		- リクエストのusernameからAcountテーブルのaccountIdをキーにユーザーオブジェクトを取得
		- ID生成
		- 生成するAccountオブジェクトを生成
		- 権限チェック
			- ユーザー作成
				- Actor: リクエストした人
				- Action: Create
				- Resource: アカウント
		- try
			- adminCreateUser
			- adminSetUserAtribuute
			- adminSetUserPassword
			- アカウントテーブルにユーザー作成
		- catch
			- adminDeleteUser
		- ユーザーオブジェクトを返却
	- レスポンスに変換
- 

# Cognitoのローカル

# API呼び出し時の認証
set-user-password

- 画面から
post


ローカル実行
フロントだけ
バックエンドだけ


import { createRouter, createWebHistory } from 'vue-router';
import Login from '@/views/Login.vue';
import AdminDashboard from '@/views/AdminDashboard.vue';
import UserDashboard from '@/views/UserDashboard.vue';

const routes = [
  { path: '/', component: Login },
  { path: '/admin', component: AdminDashboard, meta: { requiresAuth: true, role: 'admin' } },
  { path: '/user', component: UserDashboard, meta: { requiresAuth: true, role: 'user' } },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

// ナビゲーションガード
router.beforeEach((to, from, next) => {
  const user = JSON.parse(localStorage.getItem('user'));

  if (to.meta.requiresAuth) {
    if (!user) {
      next('/'); // 未ログインならログインページへ
    } else if (to.meta.role && user.role !== to.meta.role) {
      next(user.role === 'admin' ? '/admin' : '/user'); // ロールに応じてリダイレクト
    } else {
      next();
    }
  } else if (to.path === '/' && user) {
    next(user.role === 'admin' ? '/admin' : '/user'); // ログイン済みなら適切なページへ
  } else {
    next();
  }
});

export default router;
